# yaml-language-server: $schema=https://raw.githubusercontent.com/nf-core/modules/master/modules/meta-schema.json
name: "payload_validate"
description: |
  Validate JSON metadata payloads against remote JSON schemas with comprehensive error handling.
  Supports automatic schema extraction from wrapper objects, resilient processing for upstream failures,
  and detailed validation reporting with status tracking.
keywords:
  - metadata
  - payload
  - json
  - validation
  - schema
  - jsonschema
  - molecular
  - analysis
tools:
  - "python":
      description: "Python scripting language for payload validation"
      homepage: "https://www.python.org/"
      documentation: "https://docs.python.org/"
      tool_dev_url: "https://github.com/python/cpython"
      doi: ""
      licence: ["PSF-2.0"]
      identifier: ""
  - "jsonschema":
      description: "Python library for JSON Schema validation"
      homepage: "https://python-jsonschema.readthedocs.io/"
      documentation: "https://python-jsonschema.readthedocs.io/en/stable/"
      tool_dev_url: "https://github.com/python-jsonschema/jsonschema"
      doi: ""
      licence: ["MIT"]
      identifier: ""

input:
  - - meta:
        type: map
        description: |
          Groovy Map containing analysis metadata information with status
          Required fields: id (submitter_analysis_id), status (from upstream generation)
    - payload_file:
        type: file
        description: JSON payload file to validate (generated by payload_generate)
        pattern: "*_payload.json"
    - data_files:
        type: file
        description: List of actual data files passed through from upstream
        pattern: "*"

output:
  - validated_payload_files:
      - - meta:
            type: map
            description: |
              Groovy Map containing analysis metadata information
              Same as input meta
        - payload_file:
            type: file
            description: Validated JSON payload file passed through
            pattern: "*_payload.json"
        - data_files:
            type: file
            description: Original data files passed through
            pattern: "*"
  - status:
      - - meta:
            type: map
            description: |
              Groovy Map containing analysis metadata without status field
        - "*_status.yml":
            type: file
            description: Status file with validation results, prefixed with analysis ID
            pattern: "*_status.yml"
  - versions:
      - "versions.yml":
          type: file
          description: File containing software versions
          pattern: "versions.yml"

authors:
  - "@lindaxiang"
maintainers:
  - "@lindaxiang"
