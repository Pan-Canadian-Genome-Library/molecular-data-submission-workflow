nextflow_workflow {

    name "Test Workflow DATA_UPLOAD"
    script "../../../../subworkflows/local/data_upload/main.nf"
    workflow "DATA_UPLOAD"

    test("Should run data upload workflow") {

        when {
            params {
                song_url = "https://file-manager.pcgl-dev.cumulus.genomeinformatics.org"
                token = "test_token"
                exit_on_error = false
            }
            workflow {
                """
                // Create test payload files channel
                def payload_meta = [
                    id: 'test_analysis_001',
                    type: 'sequenceExperiment',
                    study_id: 'TEST_STUDY_002',
                    status: 'success'
                ]
                def payload_file = file('${projectDir}/tests/subworkflows/local/data_upload/test_payload.json', checkIfExists: true)
                def data_files = [
                    file('${projectDir}/tests/subworkflows/local/data_upload/test_file.fastq.gz', checkIfExists: true)
                ]

                input[0] = Channel.of([payload_meta, payload_file, data_files])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.analysis_id },
                { assert workflow.out.status },
                { assert workflow.out.versions }
            )
        }
    }

    test("Should handle workflow with stub") {

        options "-stub"

        when {
            params {
                song_url = "https://file-manager.pcgl-dev.cumulus.genomeinformatics.org"
                token = "test_token"
                exit_on_error = false
            }
            workflow {
                """
                // Create test payload files channel
                def payload_meta = [
                    id: 'test_analysis_stub',
                    type: 'sequenceExperiment',
                    study_id: 'TEST_STUDY_STUB',
                    status: 'success'
                ]
                def payload_file = file('${projectDir}/tests/subworkflows/local/data_upload/test_payload.json', checkIfExists: true)
                def data_files = [
                    file('${projectDir}/tests/subworkflows/local/data_upload/test_file.fastq.gz', checkIfExists: true)
                ]

                input[0] = Channel.of([payload_meta, payload_file, data_files])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.analysis_id },
                { assert workflow.out.status },
                { assert workflow.out.versions }
            )
        }
    }

    test("Should handle resilient processing with exit_on_error true") {

        when {
            params {
                song_url = "https://file-manager.pcgl-dev.cumulus.genomeinformatics.org"
                score_url = "https://file-storage.pcgl-dev.cumulus.genomeinformatics.org"
                token = "invalid_token"
                exit_on_error = "true"
            }
            workflow {
                """
                // Create test payload files channel with potential failure scenario
                def payload_meta = [
                    id: 'test_analysis_resilient',
                    type: 'sequenceExperiment',
                    study_id: 'TEST_STUDY_RESILIENT',
                    status: 'success'
                ]
                def payload_file = file('${projectDir}/tests/subworkflows/local/data_upload/test_payload.json', checkIfExists: true)
                def data_files = [
                    file('${projectDir}/tests/subworkflows/local/data_upload/test_file.fastq.gz', checkIfExists: true)
                ]

                input[0] = Channel.of([payload_meta, payload_file, data_files])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success }, // Should succeed even with failures
                { assert workflow.out.analysis_id },
                { assert workflow.out.status },
                { assert workflow.out.versions }
            )
        }
    }
}
