nextflow_workflow {

    name "Test Workflow DATA_VALIDATION"
    script "subworkflows/local/data_validation/main.nf"
    workflow "DATA_VALIDATION"

    test("Should run without failures") {

        when {
            params {
                exit_on_error = false
            }
            workflow {
                """
                // Create test meta
                def meta = [
                    id: "TEST001",
                    type: "sequenceExperiment", 
                    study: "TEST-STUDY",
                    status: "pass"
                ]

                // Create mock payload files using test data
                def payload = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/test_payload.json")
                def files = [
                    file("${projectDir}/tests/subworkflows/local/data_validation/test_data/test_file1.bam"), 
                    file("${projectDir}/tests/subworkflows/local/data_validation/test_data/test_file2.bam")
                ]
                
                // Create mock biospecimen entity files
                def specimen = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/specimen.tsv")
                def sample = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/sample.tsv") 
                def experiment = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/experiment.tsv")
                def read_group = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/read_group.tsv")

                // Define input channels
                input[0] = Channel.of([meta, payload, files])
                input[1] = Channel.of([meta, specimen, sample, experiment, read_group])
                """
            }
        }

        then {
            assert workflow.success
            assert workflow.out.validated_payload_files
            assert workflow.out.status
            assert workflow.out.versions
            
            // Check that we get outputs for each validation step
            with(workflow.out) {
                assert validated_payload_files.size() == 1
                assert status.size() >= 3  // At least 3 status files (one from each validation module)
                assert versions.size() >= 3  // At least 3 version files
            }
            
            // assert snapshot(workflow.out).match()
        }

    }

    test("Should handle validation failures gracefully") {

        when {
            params {
                exit_on_error = false
            }
            workflow {
                """
                // Create test meta with potentially problematic data
                def meta = [
                    id: "FAIL001",
                    type: "invalidType",
                    study: "FAIL-STUDY",
                    status: "pass"
                ]

                // Create mock payload and files using invalid test data
                def payload = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/invalid_payload.json")
                def files = [file("${projectDir}/tests/subworkflows/local/data_validation/test_data/corrupt_file.bam")]
                
                // Create mock biospecimen entity files (reuse valid ones)
                def specimen = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/specimen.tsv")
                def sample = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/sample.tsv")
                def experiment = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/experiment.tsv") 
                def read_group = file("${projectDir}/tests/subworkflows/local/data_validation/test_data/read_group.tsv")

                // Define input channels
                input[0] = Channel.of([meta, payload, files])
                input[1] = Channel.of([meta, specimen, sample, experiment, read_group])
                """
            }
        }

        then {
            assert workflow.success  // Should not fail due to exit_on_error=false
            assert workflow.out.validated_payload_files
            assert workflow.out.status
            assert workflow.out.versions
            
            // assert snapshot(workflow.out).match("validation_failures")
        }

    }

}
