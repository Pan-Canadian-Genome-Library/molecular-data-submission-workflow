nextflow_process {

    name "Test Process VALIDATION_CROSSCHECK"
    script "modules/local/validation/crosscheck/main.nf"
    process "VALIDATION_CROSSCHECK"

    tag "modules"
    tag "modules_local"
    tag "validation"
    tag "validation/crosscheck"

    test("MD5 checksum validation for FASTQ files") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'TEST_CROSS_001',
                        type: 'sequenceExperiment',
                        study: 'TEST-CA',
                        status: 'pass'
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_fastq.json"),
                    [
                        file("${projectDir}/tests/test_data/genomics/test_sample_R1.fastq.gz"),
                        file("${projectDir}/tests/test_data/genomics/test_sample_R2.fastq.gz")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1
            assert process.out.versions.size() == 1

            // Check output structure
            def validated_output = process.out.ch_payload_files[0]
            assert validated_output.size() == 3  // [meta, payload, payload_files]
            assert validated_output[2].size() == 2  // Two FASTQ files

            // Check status file
            def status_file = process.out.status[0][1]
            def status_content = status_file instanceof File ? status_file.text : new File(status_file.toString()).text
            assert status_content.contains('process:')
            assert status_content.contains('VALIDATION_CROSSCHECK')
            assert status_content.contains('analysis_id: "TEST_CROSS_001"')
            assert status_content.contains('payload_file:')
            assert status_content.contains('files_validated:')

            // Check versions file
            def versions_file = process.out.versions[0]
            def versions_content = versions_file instanceof File ? versions_file.text : new File(versions_file.toString()).text
            assert versions_content.contains('python:')

        }
    }

    test("MD5 checksum validation for VCF files") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'TEST_VCF_CROSS_001',
                        type: 'variantCall',
                        study: 'TEST-CA',
                        status: 'pass'
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_vcf.json"),
                    [
                        file("${projectDir}/tests/test_data/genomics/test_variants.vcf.gz"),
                        file("${projectDir}/tests/test_data/genomics/test_variants.vcf.gz.tbi")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1
            assert process.out.versions.size() == 1

            // Check output structure
            def validated_output = process.out.ch_payload_files[0]
            assert validated_output.size() == 3
            assert validated_output[2].size() == 2  // VCF + TBI files

            // Check status file
            def status_file = process.out.status[0][1]
            def status_content = status_file instanceof File ? status_file.text : new File(status_file.toString()).text
            assert status_content.contains('process:')
            assert status_content.contains('analysis_id: "TEST_VCF_CROSS_001"')

        }
    }

    test("MD5 checksum validation for BAM files") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'TEST_BAM_CROSS_001',
                        type: 'sequenceAlignment',
                        study: 'TEST-CA',
                        status: 'pass'
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_bam.json"),
                    [
                        file("${projectDir}/tests/test_data/genomics/test_sample.sorted.bam"),
                        file("${projectDir}/tests/test_data/genomics/test_sample.sorted.bam.bai")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1

            // Check output structure
            def validated_output = process.out.ch_payload_files[0]
            assert validated_output[2].size() == 2  // BAM + BAI files

            // Check status file
            def status_file = process.out.status[0][1]
            def status_content = status_file instanceof File ? status_file.text : new File(status_file.toString()).text
            assert status_content.contains('process:')
            assert status_content.contains('analysis_id: "TEST_BAM_CROSS_001"')

        }
    }

    test("Single file MD5 validation") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'TEST_SINGLE_001',
                        type: 'sequenceExperiment',
                        study: 'TEST-CA',
                        status: 'pass'
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_fastq.json"),
                    [file("${projectDir}/tests/test_data/genomics/test_sample_R1.fastq.gz")]
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1

        }
    }

    test("Upstream failure handling") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'TEST_UPSTREAM_FAIL_001',
                        type: 'sequenceExperiment',
                        study: 'TEST-CA',
                        status: 'failed'  // Upstream failure
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_fastq.json"),
                    [file("${projectDir}/tests/test_data/genomics/test_sample_R1.fastq.gz")]
                ]
                """
            }
        }

        then {
            assert process.success  // Process should continue but mark as failed
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1

            // Check status file indicates failure due to upstream
            def status_file = process.out.status[0][1]
            def status_content = status_file instanceof File ? status_file.text : new File(status_file.toString()).text
            assert status_content.contains('process: "VALIDATION_CROSSCHECK"')
            assert status_content.contains('status: "FAILED"')
            assert status_content.contains('Skipped MD5 checksum validation due to upstream failure')
        }
    }

    test("Empty files list handling") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'TEST_EMPTY_FILES_001',
                        type: 'sequenceExperiment',
                        study: 'TEST-CA',
                        status: 'pass'
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_fastq.json"),
                    []  // Empty files list
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1

            // Check empty files handling
            def validated_output = process.out.ch_payload_files[0]
            assert validated_output[2].size() == 0
        }
    }

    test("Corrupt/invalid files handling") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'TEST_CORRUPT_001',
                        type: 'sequenceExperiment',
                        study: 'TEST-CA',
                        status: 'pass'
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_fastq.json"),
                    [
                        file("${projectDir}/tests/test_data/genomics/corrupt_file.fastq.gz"),
                        file("${projectDir}/tests/test_data/genomics/corrupt_file.vcf.gz")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success  // Should continue but may mark as failed
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1

            // Files should still be passed through
            def validated_output = process.out.ch_payload_files[0]
            assert validated_output[2].size() == 2
        }
    }

    test("Stub test for crosscheck validation") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'STUB_CROSS_001',
                        type: 'sequenceExperiment',
                        study: 'STUB-CA',
                        status: 'pass'
                    ],
                    file("${projectDir}/tests/test_data/payload/payload_fastq.json"),
                    [
                        file("${projectDir}/tests/test_data/genomics/test_sample_R1.fastq.gz"),
                        file("${projectDir}/tests/test_data/genomics/test_sample_R2.fastq.gz")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.ch_payload_files.size() == 1
            assert process.out.status.size() == 1
            assert process.out.versions.size() == 1

            // Check output structure in stub mode
            def validated_output = process.out.ch_payload_files[0]
            assert validated_output.size() == 3
            assert validated_output[2].size() == 2

            // Check status file contains SUCCESS (stub mode)
            def status_file = process.out.status[0][1]
            def status_content = status_file instanceof File ? status_file.text : new File(status_file.toString()).text
            assert status_content.contains('process: "VALIDATION_CROSSCHECK"')
            assert status_content.contains('status: "SUCCESS"')
            assert status_content.contains('analysis_id: "STUB_CROSS_001"')
            assert status_content.contains('payload_file:')
            assert status_content.contains('files_validated:')

            // Check versions file
            def versions_file = process.out.versions[0]
            def versions_content = versions_file instanceof File ? versions_file.text : new File(versions_file.toString()).text
            assert versions_content.contains('python: 3.9.0')
        }
    }
}
