/*
========================================================================================
    Nextflow config file for running tests
========================================================================================
*/

process.executor = 'local'

// Default parameters for testing
params {
    
    // Output directory for test results
    outdir = "tests/test_results"

    // Default test parameters
    max_memory = '2.GB'
    max_cpus = 2
    max_time = '1.h'
    
    // Data staging parameters (from cumulus_dev.config)
    song_url                   = "https://file-manager.pcgl-dev.cumulus.genomeinformatics.org"
    score_url                  = "https://file-transfer.pcgl-dev.cumulus.genomeinformatics.org"
    song_url_upload            = "https://file-manager.pcgl-dev.cumulus.genomeinformatics.org"
    score_url_upload           = "https://file-transfer.pcgl-dev.cumulus.genomeinformatics.org"
    clinical_submission_url    = "https://submission.pcgl-dev.cumulus.genomeinformatics.org"
    
    // Process-specific parameters
    payload_generate {
        exit_on_error = false
        timeout = '30.min'
    }
    
    payload_validate {
        exit_on_error = false
        ext.schema_url = "${params.song_url}/schemas"
        timeout = '15.min'
    }
    
    // Test-specific flags
    enable_conda = false
    singularity_pull_docker_container = false
}

profiles {
    test {
        params {
            // Override for basic testing
            max_memory = '1.GB'
            max_cpus = 1
            payload_generate.exit_on_error = false
            payload_validate.exit_on_error = false
        }
        
        process {
            // Enable stub mode for faster testing
            withName: 'PAYLOAD_GENERATE' {
                ext.args = ''
                ext.exit_on_error = params.payload_generate.exit_on_error
                memory = params.max_memory
                cpus = params.max_cpus
                time = params.payload_generate.timeout
                publishDir = [
                    path: { "${params.outdir}/payload_generation" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: 'PAYLOAD_VALIDATE' {
                ext.args = ''
                ext.exit_on_error = params.payload_validate.exit_on_error
                memory = params.max_memory
                cpus = params.max_cpus
                time = params.payload_validate.timeout
                publishDir = [
                    path: { "${params.outdir}/payload_validation" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
    
    test_full {
        params {
            // Override for integration testing with real data
            max_memory = '4.GB'
            max_cpus = 2
            payload_generate.timeout = '1.h'
            payload_validate.timeout = '30.min'
        }
        
        process {
            withName: 'PAYLOAD_GENERATE' {
                memory = params.max_memory
                cpus = params.max_cpus
                time = params.payload_generate.timeout
                ext.exit_on_error = params.payload_generate.exit_on_error
            }
            withName: 'PAYLOAD_VALIDATE' {
                memory = { task.attempt == 1 ? params.max_memory : params.max_memory * 2 }
                cpus = params.max_cpus
                time = params.payload_validate.timeout
                ext.exit_on_error = params.payload_validate.exit_on_error
                errorStrategy = 'retry'
                maxRetries = 2
            }
        }
    }
    
    test_stub {
        // For stub testing (fastest)
        params {
            max_memory = '500.MB'
            max_cpus = 1
        }
        
        process {
            withName: '.*' {
                memory = params.max_memory
                cpus = params.max_cpus
                time = '5.min'
            }
        }
    }
}
